//   ╔═╗┬  ┌─┐┌┐┌┌┬┐  ╔═╗┌─┐┬           
//   ╠═╝│  ├─┤│││ │   ╠═╝├─┤│     
//   ╩  ┴─┘┴ ┴┘└┘ ┴   ╩  ┴ ┴┴─┘
//   ┌─┐┌┬┐┬ ┬┌─┐┌┐┌  ╔╦╗┌─┐┌─┐   
//   ├┤  │ ├─┤├─┤│││   ║║├┤ ├─┤   
//   └─┘ ┴ ┴ ┴┴ ┴┘└┘  ═╩╝└─┘┴ ┴   
//   v0.3 Alpha May 19 2023

//Graphics libraries
#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>

//OLED DEFINITIONS
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'title screen', 128x32px
const unsigned char logoScreen [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x11, 
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x1f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44, 0x44, 0x44, 
	0x0f, 0x9b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xcb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 
	0x0e, 0xca, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x40, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x03, 0x9f, 0x38, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 0x80, 
	0x00, 0x3f, 0x80, 0x01, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x03, 0xc1, 
	0x1e, 0x5f, 0xcf, 0x01, 0xe7, 0x87, 0x00, 0x00, 0x00, 0x03, 0x80, 0x07, 0x1c, 0x00, 0x03, 0xc0, 
	0x3f, 0x2f, 0xdf, 0x81, 0xe7, 0x87, 0x03, 0xf0, 0x7f, 0x07, 0xf0, 0x07, 0x1c, 0x1f, 0x03, 0xc4, 
	0x78, 0x57, 0xc3, 0xc1, 0xe7, 0x87, 0x03, 0xf0, 0xff, 0x0f, 0xf0, 0x07, 0x1c, 0x3f, 0x83, 0xc0, 
	0x3f, 0x2b, 0xdf, 0x81, 0xe7, 0x87, 0x00, 0x3c, 0xf3, 0xc3, 0x80, 0x07, 0x1c, 0x01, 0xc3, 0xc1, 
	0x1e, 0x55, 0xcf, 0x01, 0xff, 0x07, 0x03, 0xfc, 0xf3, 0xc3, 0x80, 0x07, 0xfc, 0x1f, 0xc3, 0xc0, 
	0x00, 0x2a, 0x80, 0x01, 0xfe, 0x07, 0x03, 0xfc, 0xf3, 0xc3, 0x80, 0x07, 0xf8, 0x3f, 0xc3, 0xc4, 
	0x03, 0x95, 0x38, 0x01, 0xe0, 0x07, 0x0f, 0x3c, 0xf3, 0xc3, 0x80, 0x07, 0x00, 0x71, 0xc3, 0xc0, 
	0x07, 0x40, 0x5c, 0x01, 0xe0, 0x07, 0x87, 0xfc, 0xf3, 0xc3, 0xf0, 0x07, 0x00, 0x7f, 0xc1, 0xe1, 
	0x0e, 0xca, 0x6e, 0x01, 0xe0, 0x03, 0xc3, 0xfc, 0xf3, 0xc1, 0xf0, 0x07, 0x00, 0x3f, 0xc0, 0xe0, 
	0x0f, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
	0x0f, 0x9b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0x1f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x11, 0x11, 0x11, 
	0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44, 0x44, 0x44, 0x44, 0x44, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
	
};
// 'Loading Screen', 128x32px
const unsigned char splashScreen [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
	0x00, 0x03, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x1d, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x14, 0xe0, 0x70, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0xcf, 0xff, 0x00, 0x00, 0x34, 0x1c, 0xc0, 0xa0, 0x00, 0x00, 0x03, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0xcf, 0xfe, 0x00, 0x00, 0x03, 0xa4, 0xc3, 0x80, 0x00, 0x00, 0x07, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x07, 0x80, 0x00, 0x17, 0x94, 0x87, 0x40, 0x00, 0x00, 0x1f, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x67, 0x80, 0x00, 0x00, 0xc8, 0x1c, 0xc0, 0x00, 0x00, 0x1f, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0xe1, 0xff, 0x80, 0x00, 0x10, 0x20, 0x99, 0x80, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x7f, 0xe0, 0x00, 0x0e, 0x10, 0x21, 0x80, 0x00, 0x00, 0x1f, 0x7c, 0x00, 0x00, 
	0x00, 0x00, 0xe4, 0x7f, 0xe0, 0x00, 0x07, 0x3c, 0x7b, 0x00, 0x00, 0x00, 0x7f, 0x7e, 0x00, 0x00, 
	0x00, 0x00, 0xe7, 0x00, 0x60, 0x00, 0x03, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0xcf, 0x79, 0x00, 0x00, 
	0x00, 0x00, 0xf7, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x79, 0x80, 0x00, 
	0x00, 0x00, 0xf7, 0x0f, 0xf8, 0x00, 0x00, 0x1c, 0xe0, 0x00, 0x00, 0x00, 0xf0, 0x07, 0x80, 0x00, 
	0x00, 0x00, 0x37, 0x23, 0xf8, 0x00, 0x00, 0x7c, 0xd8, 0x00, 0x00, 0x01, 0xff, 0x7f, 0xc0, 0x00, 
	0x00, 0x00, 0x27, 0x31, 0xf8, 0x00, 0x00, 0x8c, 0xdc, 0x00, 0x00, 0x03, 0xfe, 0x3f, 0xe0, 0x00, 
	0x00, 0x00, 0x3f, 0x38, 0x18, 0x00, 0x0b, 0x8c, 0x86, 0x80, 0x00, 0x03, 0x9e, 0x3a, 0xe0, 0x00, 
	0x00, 0x00, 0x7f, 0x3c, 0x38, 0x00, 0x16, 0x70, 0x73, 0x70, 0x00, 0x03, 0x81, 0x40, 0xe0, 0x00, 
	0x00, 0x00, 0x0f, 0x3c, 0x78, 0x00, 0x30, 0x60, 0x39, 0x20, 0x00, 0x01, 0xe0, 0x01, 0xc0, 0x00, 
	0x00, 0x00, 0x01, 0xfc, 0xd8, 0x00, 0x1d, 0xc1, 0x1f, 0xc0, 0x00, 0x00, 0xf2, 0x67, 0x80, 0x00, 
	0x00, 0x00, 0x01, 0xfd, 0x98, 0x00, 0x0f, 0x83, 0x0f, 0x80, 0x00, 0x00, 0xff, 0x3f, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc6, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1056)
const int splashScreensallArray_LEN = 2;
const unsigned char* splashScreensallArray[2] = {
	logoScreen,
	splashScreen
};


//Constants, used for GPIO Pins
const int humPin = 14;        //Humidity sensor A0 is connected to GPIO 14
const int LEDRelayPin = 16;  //LED Transistor/Relay Connected to GPIO 23
const int wRelayPin = 23;    //Water pump Transitor/Relay connected to GPIO 34
const int enterButtonPin =13;   //Enter Button is connected to GPIO
const int actionButtonPin =12;        //Action Button

//VARIABLE DEFINITIONS

// USER DEFINED VARIABLES
float uLEDTime = 0;           //User defined LED time ON per day in hours
int uHum = 0;               //set to trigger pump if disHum is below that ammount
int uWaterDays = 0;         //user defined how many days between watering
int uWaterAmount = 1;       //User Defined water ammount in mL. Will be converted pump on time

//SYSTEM VARIABLES
int disHum;                   //for finalized display humidity, passed from humSensor
int timeOnCounter = 0;       //Time in seconds LED Has been on for
int timeOffCounter = 0;     //Time in seconds LED has been off for
const int bDelay = 200;
/////////////////////////////////////////////////////////////////////////////////////////////////

void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
    
  }
  // Clear Display buffer
  display.clearDisplay();
  
  pinMode(wRelayPin, OUTPUT);
  pinMode(LEDRelayPin, OUTPUT);
  pinMode(enterButtonPin, INPUT);
  pinMode(actionButtonPin,INPUT);
}

void loop(){
  //draw logo
    display.clearDisplay();
    display.drawBitmap(0, 0, logoScreen, 128, 32, WHITE);
    display.display();
    delay(2000);
    display.clearDisplay();
  startUpMenu();
  delay(2000);
  loopy();
  //Serial.println(disHum);
  //delay(500);
}

//just loops LED until days = uWaterDays, then it just runs the pump function
void loopy()
{
  int days =0;
  while (days < uWaterDays){
    LED();
    days++;    
  }
  wPump();
  days = 0;
}

//all display functions, currently using disHum
// SDA on GPIO 21, SCK on GPIO 22
void OLED() {
  display.clearDisplay();

  //Display disHum
    display.setCursor(0,0); 
    display.setTextSize(2);            
    display.setTextColor(SSD1306_WHITE);
    display.print(disHum); 
    display.setTextSize(1);
    display.println("% soil humidity");

  //show led either on or off in hours
    if (timeOnCounter > 0){                          //show time on in hours
    display.setCursor(0,20); 
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.print(F("Light on for "));
    display.print(timeOnCounter /3600);
   display.print(F("/"));
   display.print(uLEDTime, 1);   
   display.display();
    }    else {             
    display.setCursor(0,20);                              //show time off in hours
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.print(F("Light off for "));
    display.print(timeOffCounter /3600);
   display.print(F("/"));
    display.print(24- uLEDTime, 1);   
    display.display();
    }
}

//Humidity sensor function, returns a value from 0-100
int humSensor() {
  int rawHumV = analogRead(humPin); //Raw Humidity voltage from sensor
  int calcHum;
  calcHum = map(rawHumV, 1200, 4095, 100, 0);
  return calcHum;
}

//pump function will turn turn on if disHum<uHum. despenses water according to uWaterAmount
void wPump() {
  Serial.println("Starting wPump(), will compare disHum and uHum");
  if(disHum<uHum){
    Serial.println("Pump ON");
    digitalWrite(wRelayPin, HIGH); //pump on
    delay((uWaterAmount*50)+200);   //wait for water. Will have to change these values later
    Serial.println("Pump OFF");
    digitalWrite(wRelayPin, LOW);  //pump off
  }
    Serial.println("wPump() finished");
}

//LED on off function
void LED() {
  Serial.println("Starting LED():");
  int timeOn = uLEDTime*60*60; //timeOn is how long the light should stay on in seconds. Determined from userLEDTime
    Serial.println(timeOn);
    Serial.println("timeOn");

  int timeOff = (24-uLEDTime)*60*60; //timeOff is how long the light should remain off for in seconds Determined from userLEDTime
    Serial.println(timeOff);
    Serial.println("timeOff");

  Serial.println("light On");               //loop with light on until LEDCounter is less than timeOn
  digitalWrite(LEDRelayPin, HIGH);          // Turn LED ON!

  while (timeOnCounter<timeOn) {
    delay(1000);
    timeOnCounter++;
    //update display
    disHum = humSensor();
    OLED();
     }
                                        // Timer is finished begin LED Off timer
  timeOnCounter = 0;
  
  Serial.println("light off. Beginning light off wait timer");
    digitalWrite(LEDRelayPin, LOW);

    
    while (timeOffCounter<timeOff) {
    delay(1000);
    timeOffCounter++;
    //update display
    disHum = humSensor();
    OLED();
    }
    timeOffCounter = 0;
    Serial.println("finished light off timer");
}

//startupMenu brings up the userMode(); function, this will bring up the options to the user of auto, advanced, or demo.
void startUpMenu(){
  int userModeSelection;

  userModeSelection = userMode();
  Serial.println(userModeSelection);
  Serial.println("^ userModeSelection ^");

  if (userModeSelection == 0){ //AUTO MODE
   Serial.println("starting Auto Mode...");
   autoMode();

  } else if (userModeSelection == 1){ //ADVANCED MODE
   Serial.println("starting Custom Mode...");
   advancedMode();
  
  } else { //DEMO MODE
    Serial.println("starting Demo Mode...");
    demoMode();
  }
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.drawBitmap(0, 0, splashScreen, 128, 32, WHITE);
  display.display();
  delay(1000);
   
}

int userMode(){
  String mode[3];
  mode[0] = "Auto Mode";
  mode[1] = "Custom";
  mode[2] = "Demo Mode";
  int currentModeSelection = 0;
    while (digitalRead(enterButtonPin) != HIGH){
      display.clearDisplay();
      display.setCursor(0,10);
      display.setTextSize(2);
      display.setTextColor(SSD1306_WHITE);
      display.print(F(mode[currentModeSelection]));
      display.display();
      if (digitalRead(actionButtonPin) == HIGH){
        currentModeSelection++;
        delay(bDelay);
    }
      if (currentModeSelection > 2){
        currentModeSelection = 0;
    }
  }
  Serial.println(mode[currentModeSelection]);
  Serial.println("^ Mode Selected ^");  
  delay(bDelay);  
  return(currentModeSelection);

}

void autoMode(){
  Serial.println("auto mode started");
  String plantType[5];
  plantType[0] = "Succulent";
  plantType[1] = "Broad Leaf";
  plantType[2] = "Fern";
  plantType[3] = "Herb";
  plantType[4] = "Seedlings";
  int currentPlantSelection = 0;
  while (digitalRead(enterButtonPin) != HIGH){
    if (digitalRead(actionButtonPin) == HIGH){
      currentPlantSelection++;
      delay(bDelay); //button delay
    }
    if (currentPlantSelection > 4){
      currentPlantSelection = 0;; 
    }
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(2);
    display.setCursor(0,10);
    display.print(F(plantType[currentPlantSelection]));
    display.display();
  }
  switch (currentPlantSelection) {
  case 0: //Succulent
  uLEDTime = 12;           //User defined LED time ON per day in hours
  uHum = 10;               //set to trigger pump if disHum is below that ammount
  uWaterDays = 14;         //user defined how many days between watering
  uWaterAmount = 30;       //User Defined water ammount in mL. Will be converted pump on time
    break;
  case 1: //Broad Leaf
  uLEDTime = 10;           //User defined LED time ON per day in hours
  uHum = 10;               //set to trigger pump if disHum is below that ammount
  uWaterDays = 10;         //user defined how many days between watering
  uWaterAmount = 100;       //User Defined water ammount in mL. Will be converted pump on time
    break;
  case 2: //Fern
  uLEDTime = 6;           //User defined LED time ON per day in hours
  uHum = 50;               //set to trigger pump if disHum is below that ammount
  uWaterDays = 3;         //user defined how many days between watering
  uWaterAmount = 30;       //User Defined water ammount in mL. Will be converted pump on time
    break;
  case 3: //Herb
  uLEDTime = 12;           //User defined LED time ON per day in hours
  uHum = 40;               //set to trigger pump if disHum is below that ammount
  uWaterDays = 7;         //user defined how many days between watering
  uWaterAmount = 50;       //User Defined water ammount in mL. Will be converted pump on time
    break;
  case 4: //Seedlings
  uLEDTime = 15;           //User defined LED time ON per day in hours
  uHum = 30;               //set to trigger pump if disHum is below that ammount
  uWaterDays = 1;         //user defined how many days between watering
  uWaterAmount = 30;       //User Defined water ammount in mL. Will be converted pump on time
    break;
  }
delay(bDelay);  
}

void advancedMode(){
int tempUserSelection =0;   
//Hours of Sun (uLEDTIME)
  while (digitalRead(enterButtonPin) != HIGH){
      if (digitalRead(actionButtonPin) == HIGH){
      tempUserSelection++;
      delay(bDelay);
      }
      if (tempUserSelection > 24){ //tempUserSelection will reset if more then 24 hours
      tempUserSelection = 0;
      }
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(1);
    display.print(F("Hours light Per Day "));
    display.setCursor(0,10);    
    display.println(tempUserSelection);
    display.display();
  }
  uLEDTime = tempUserSelection;
  tempUserSelection =0;
  delay(bDelay);
//Soil Humidity Trigger Level (uHum)
    while (digitalRead(enterButtonPin) != HIGH){
      if (digitalRead(actionButtonPin) == HIGH){
      tempUserSelection = tempUserSelection +5;
      delay(200);
      }
      if (tempUserSelection > 100){
      tempUserSelection = 0;
      }
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(1);
    display.print(F("Soil Humidity "));
    display.setCursor(0,10);   
    display.println(tempUserSelection);
    display.print("%");
    display.display();
    }
  uHum = tempUserSelection;
  tempUserSelection =0;
  delay(bDelay);
//Days Between Watering (uWaterDays)
    while (digitalRead(enterButtonPin) != HIGH){
    if (digitalRead(actionButtonPin) == HIGH){
      tempUserSelection = tempUserSelection +2;
      delay(200);
    }
    if (tempUserSelection > 30){
      tempUserSelection = 0;
    }
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print(F("Check Soil Every "));
  display.setCursor(0,10);   
  display.println(tempUserSelection);
  display.print(F(" days"));
  display.display();
  }
  uWaterDays = tempUserSelection;
  tempUserSelection =0;
  delay(bDelay);
//How Much Water to Dispence (uWaterAmount)
    while (digitalRead(enterButtonPin) != HIGH){
    if (digitalRead(actionButtonPin) == HIGH){
      tempUserSelection = tempUserSelection +10;
      delay(200);
    }
    if (tempUserSelection > 500){
      tempUserSelection = 0;
    }
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print(F("Use "));
  display.print(tempUserSelection);
  display.print(F("mL"));
  display.setCursor(0,10);   
  display.println(F("When Watering"));
  display.display();
  }
  uWaterDays = tempUserSelection;
  tempUserSelection =0;
  delay(bDelay);
}

void demoMode(){
  Serial.println("demo mode started");

  display.clearDisplay();
  delay(100);
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.println(F("starting demo..."));
  delay(1000);
  display.clearDisplay();
  display.println(F("flashing lights..."));
  int temp =0;
  while (temp< 3){
    digitalWrite(LEDRelayPin, HIGH); //led on
    delay(1000);
    digitalWrite(LEDRelayPin, LOW);
    delay(1000);
    temp++;
  }
  temp=0;
  display.clearDisplay();
  display.println(F("turning on pump..."));
  digitalWrite(wRelayPin, HIGH); //led on
  delay(2000);
  digitalWrite(wRelayPin, LOW);
  display.clearDisplay();
  display.println(F("resetting..."));
  delay(1000);
  ESP.restart();
}
